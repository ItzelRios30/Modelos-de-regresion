import sys
import warnings
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures

if not sys.warnoptions:
    warnings.simplefilter("ignore")

def Model_Polynomial_Regression(X_regressor,Y_target,n_degree):

    X_train, X_test, y_train, y_test = train_test_split(X_regressor, Y_target, test_size=0.2, random_state=0)
    
    poly_reg = PolynomialFeatures(degree=n_degree) 
    X_poly = poly_reg.fit_transform(X_train)

    pol_reg = LinearRegression()
    pol_reg.fit(X_poly, y_train)

    prediction = pol_reg.predict(poly_reg.fit_transform(np.array(X_test)))
    
    df=pd.DataFrame()
    df=X_test.copy()
    df['price']=y_test
    df['prediction']=prediction

    if Y_target.name=='Precio/m2':
        prediction=df['prediction']*df['m2']
        y_validate=df['price']*df['m2']
    else:
        prediction=df['prediction']
        y_validate=df['price']
    
    MAE_score = mean_absolute_error(prediction,y_validate)
    MSE_SCORE=np.sqrt(mean_squared_error(prediction,y_validate))
    print(coli,MAE_score,'+/-',MSE_SCORE)

    absolute_variation = np.floor((abs(prediction/y_validate-1))*100)
    
    bins = [-0.1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100,10000]
    S = pd.cut(absolute_variation, bins)
    Y_exe = S.value_counts().reindex(S.cat.categories)
    fig = plt.figure(figsize = (14, 7))
    plt.plot(range(0,11), Y_exe, 'ro-') 
    plt.xticks(range(0,12),bins) 
    plt.ylabel('Frecuencia')
    plt.xlabel('Rango en diferencia Porcentual')
    plt.show()
    
    return poly_reg,pol_reg
    


Colonias_in = [365,363,305,452,148,46,392,87,440,444,436,20,319,339,196,438,15,454,204]

result={}
Columnas_orden = ['m2', 'Rec', 'Est', 'Ba�']
for i in Colonias_in:
    Xx=X[X['Colonia2']==i][{'m2', 'Rec', 'Est', 'Ba�'}]
    Xx = Xx.reindex(columns = Columnas_orden)
    Yy=Y['Precio/m2'][Y['Colonia2']==i]
    coli = str((x["Colonia"][x['Colonia2']==i].iloc[1]))
    #print(coli)
    #print(len(Xx[Xx['Colonia2']==i]))
    result[i]=ModelRP(Xx,Yy,2)
    result
    
joblib.dump(result, 'modelo_entrenado_poly.pkl')
